generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    epics Epic[]
    projects Project[]
    tasks Task[]
    routines Routine[]
    // schedule Schedule?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Epic {
    id            String    @id @default(cuid())
    name          String
    userId String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    projects Project[]
}

model Project {
    id            String    @id @default(cuid())
    name          String
    
    userId String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    epicId String
    epic Epic @relation(fields: [epicId], references: [id], onDelete: Cascade)

    tasks Task[]
}

model Task {
    id            String    @id @default(cuid())
    name          String
    description String
    status  Status    @default(TODO)

    userId String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    projects Project[]
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

model Routine {
    id            String    @id @default(cuid())
    name          String
    description String

    // Day on which the routine happens
    days Days[]

    // Time at which the routine happens
    time  DateTime   @db.Time(0)


    userId String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}


// Timer schedule
model Schedule {
    id            String    @id @default(cuid())
    name          String

    userId String
    // user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}